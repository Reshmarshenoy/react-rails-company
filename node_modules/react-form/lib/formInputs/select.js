'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

exports.default = FormInputSelect;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _formInput = require('../formInput');

var _formInput2 = _interopRequireDefault(_formInput);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }
//


function FormInputSelect(_ref) {
  var options = _ref.options,
      field = _ref.field,
      showErrors = _ref.showErrors,
      errorBefore = _ref.errorBefore,
      isForm = _ref.isForm,
      noTouch = _ref.noTouch,
      rest = _objectWithoutProperties(_ref, ['options', 'field', 'showErrors', 'errorBefore', 'isForm', 'noTouch']);

  return _react2.default.createElement(
    _formInput2.default,
    { field: field, showErrors: showErrors, errorBefore: errorBefore, isForm: isForm },
    function (_ref2) {
      var setValue = _ref2.setValue,
          getValue = _ref2.getValue,
          setTouched = _ref2.setTouched;

      var resolvedOptions = options.find(function (d) {
        return d.value === '';
      }) ? options : [{
        label: 'Select One...',
        value: '',
        disabled: true
      }].concat(_toConsumableArray(options));
      var selectedIndex = resolvedOptions.findIndex(function (d) {
        return d.value === getValue();
      });
      var nullIndex = resolvedOptions.findIndex(function (d) {
        return d.value === '';
      });
      return _react2.default.createElement(
        'select',
        _extends({}, rest, {
          onChange: function onChange(e) {
            var val = resolvedOptions[e.target.value].value;
            setValue(val, noTouch);
          },
          onBlur: function onBlur() {
            return setTouched();
          },
          value: selectedIndex > -1 ? selectedIndex : nullIndex
        }),
        resolvedOptions.map(function (option, i) {
          return _react2.default.createElement(
            'option',
            {
              key: i,
              value: i,
              disabled: option.disabled
            },
            option.label
          );
        })
      );
    }
  );
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9mb3JtSW5wdXRzL3NlbGVjdC5qcyJdLCJuYW1lcyI6WyJGb3JtSW5wdXRTZWxlY3QiLCJvcHRpb25zIiwiZmllbGQiLCJzaG93RXJyb3JzIiwiZXJyb3JCZWZvcmUiLCJpc0Zvcm0iLCJub1RvdWNoIiwicmVzdCIsInNldFZhbHVlIiwiZ2V0VmFsdWUiLCJzZXRUb3VjaGVkIiwicmVzb2x2ZWRPcHRpb25zIiwiZmluZCIsImQiLCJ2YWx1ZSIsImxhYmVsIiwiZGlzYWJsZWQiLCJzZWxlY3RlZEluZGV4IiwiZmluZEluZGV4IiwibnVsbEluZGV4IiwiZSIsInZhbCIsInRhcmdldCIsIm1hcCIsIm9wdGlvbiIsImkiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7O2tCQUl3QkEsZTs7QUFKeEI7Ozs7QUFFQTs7Ozs7Ozs7O0FBREE7OztBQUdlLFNBQVNBLGVBQVQsT0FBK0Y7QUFBQSxNQUFwRUMsT0FBb0UsUUFBcEVBLE9BQW9FO0FBQUEsTUFBM0RDLEtBQTJELFFBQTNEQSxLQUEyRDtBQUFBLE1BQXBEQyxVQUFvRCxRQUFwREEsVUFBb0Q7QUFBQSxNQUF4Q0MsV0FBd0MsUUFBeENBLFdBQXdDO0FBQUEsTUFBM0JDLE1BQTJCLFFBQTNCQSxNQUEyQjtBQUFBLE1BQW5CQyxPQUFtQixRQUFuQkEsT0FBbUI7QUFBQSxNQUFQQyxJQUFPOztBQUM1RyxTQUNFO0FBQUE7QUFBQSxNQUFXLE9BQU9MLEtBQWxCLEVBQXlCLFlBQVlDLFVBQXJDLEVBQWlELGFBQWFDLFdBQTlELEVBQTJFLFFBQVFDLE1BQW5GO0FBQ0cscUJBQXNDO0FBQUEsVUFBcENHLFFBQW9DLFNBQXBDQSxRQUFvQztBQUFBLFVBQTFCQyxRQUEwQixTQUExQkEsUUFBMEI7QUFBQSxVQUFoQkMsVUFBZ0IsU0FBaEJBLFVBQWdCOztBQUNyQyxVQUFNQyxrQkFBa0JWLFFBQVFXLElBQVIsQ0FBYTtBQUFBLGVBQUtDLEVBQUVDLEtBQUYsS0FBWSxFQUFqQjtBQUFBLE9BQWIsSUFBb0NiLE9BQXBDLElBQStDO0FBQ3JFYyxlQUFPLGVBRDhEO0FBRXJFRCxlQUFPLEVBRjhEO0FBR3JFRSxrQkFBVTtBQUgyRCxPQUEvQyw0QkFJbEJmLE9BSmtCLEVBQXhCO0FBS0EsVUFBTWdCLGdCQUFnQk4sZ0JBQWdCTyxTQUFoQixDQUEwQjtBQUFBLGVBQUtMLEVBQUVDLEtBQUYsS0FBWUwsVUFBakI7QUFBQSxPQUExQixDQUF0QjtBQUNBLFVBQU1VLFlBQVlSLGdCQUFnQk8sU0FBaEIsQ0FBMEI7QUFBQSxlQUFLTCxFQUFFQyxLQUFGLEtBQVksRUFBakI7QUFBQSxPQUExQixDQUFsQjtBQUNBLGFBQ0U7QUFBQTtBQUFBLHFCQUNNUCxJQUROO0FBRUUsb0JBQVUsa0JBQUNhLENBQUQsRUFBTztBQUNmLGdCQUFNQyxNQUFNVixnQkFBZ0JTLEVBQUVFLE1BQUYsQ0FBU1IsS0FBekIsRUFBZ0NBLEtBQTVDO0FBQ0FOLHFCQUFTYSxHQUFULEVBQWNmLE9BQWQ7QUFDRCxXQUxIO0FBTUUsa0JBQVE7QUFBQSxtQkFBTUksWUFBTjtBQUFBLFdBTlY7QUFPRSxpQkFBT08sZ0JBQWdCLENBQUMsQ0FBakIsR0FBcUJBLGFBQXJCLEdBQXFDRTtBQVA5QztBQVNHUix3QkFBZ0JZLEdBQWhCLENBQW9CLFVBQUNDLE1BQUQsRUFBU0MsQ0FBVCxFQUFlO0FBQ2xDLGlCQUNFO0FBQUE7QUFBQTtBQUNFLG1CQUFLQSxDQURQO0FBRUUscUJBQU9BLENBRlQ7QUFHRSx3QkFBVUQsT0FBT1I7QUFIbkI7QUFLR1EsbUJBQU9UO0FBTFYsV0FERjtBQVNELFNBVkE7QUFUSCxPQURGO0FBdUJEO0FBaENILEdBREY7QUFvQ0QiLCJmaWxlIjoic2VsZWN0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xuLy9cbmltcG9ydCBGb3JtSW5wdXQgZnJvbSAnLi4vZm9ybUlucHV0J1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBGb3JtSW5wdXRTZWxlY3QgKHtvcHRpb25zLCBmaWVsZCwgc2hvd0Vycm9ycywgZXJyb3JCZWZvcmUsIGlzRm9ybSwgbm9Ub3VjaCwgLi4ucmVzdH0pIHtcbiAgcmV0dXJuIChcbiAgICA8Rm9ybUlucHV0IGZpZWxkPXtmaWVsZH0gc2hvd0Vycm9ycz17c2hvd0Vycm9yc30gZXJyb3JCZWZvcmU9e2Vycm9yQmVmb3JlfSBpc0Zvcm09e2lzRm9ybX0+XG4gICAgICB7KHtzZXRWYWx1ZSwgZ2V0VmFsdWUsIHNldFRvdWNoZWR9KSA9PiB7XG4gICAgICAgIGNvbnN0IHJlc29sdmVkT3B0aW9ucyA9IG9wdGlvbnMuZmluZChkID0+IGQudmFsdWUgPT09ICcnKSA/IG9wdGlvbnMgOiBbe1xuICAgICAgICAgIGxhYmVsOiAnU2VsZWN0IE9uZS4uLicsXG4gICAgICAgICAgdmFsdWU6ICcnLFxuICAgICAgICAgIGRpc2FibGVkOiB0cnVlXG4gICAgICAgIH0sIC4uLm9wdGlvbnNdXG4gICAgICAgIGNvbnN0IHNlbGVjdGVkSW5kZXggPSByZXNvbHZlZE9wdGlvbnMuZmluZEluZGV4KGQgPT4gZC52YWx1ZSA9PT0gZ2V0VmFsdWUoKSlcbiAgICAgICAgY29uc3QgbnVsbEluZGV4ID0gcmVzb2x2ZWRPcHRpb25zLmZpbmRJbmRleChkID0+IGQudmFsdWUgPT09ICcnKVxuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgIDxzZWxlY3RcbiAgICAgICAgICAgIHsuLi5yZXN0fVxuICAgICAgICAgICAgb25DaGFuZ2U9eyhlKSA9PiB7XG4gICAgICAgICAgICAgIGNvbnN0IHZhbCA9IHJlc29sdmVkT3B0aW9uc1tlLnRhcmdldC52YWx1ZV0udmFsdWVcbiAgICAgICAgICAgICAgc2V0VmFsdWUodmFsLCBub1RvdWNoKVxuICAgICAgICAgICAgfX1cbiAgICAgICAgICAgIG9uQmx1cj17KCkgPT4gc2V0VG91Y2hlZCgpfVxuICAgICAgICAgICAgdmFsdWU9e3NlbGVjdGVkSW5kZXggPiAtMSA/IHNlbGVjdGVkSW5kZXggOiBudWxsSW5kZXh9XG4gICAgICAgICAgPlxuICAgICAgICAgICAge3Jlc29sdmVkT3B0aW9ucy5tYXAoKG9wdGlvbiwgaSkgPT4ge1xuICAgICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgIDxvcHRpb25cbiAgICAgICAgICAgICAgICAgIGtleT17aX1cbiAgICAgICAgICAgICAgICAgIHZhbHVlPXtpfVxuICAgICAgICAgICAgICAgICAgZGlzYWJsZWQ9e29wdGlvbi5kaXNhYmxlZH1cbiAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICB7b3B0aW9uLmxhYmVsfVxuICAgICAgICAgICAgICAgIDwvb3B0aW9uPlxuICAgICAgICAgICAgICApXG4gICAgICAgICAgICB9KX1cbiAgICAgICAgICA8L3NlbGVjdD5cbiAgICAgICAgKVxuICAgICAgfX1cbiAgICA8L0Zvcm1JbnB1dD5cbiAgKVxufVxuIl19